#pragma once

#include <stdio.h>
#include <stdint.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>

/* finte field operations of q = 2^m , m is no larger than 8 */

/* following tables are genreated with gen_gf2.py */

/* this is the primitive element of the finite field */


static const uint8_t alphas_3[] = { 
1, 2, 4, 3, 6, 7, 5, 1
};
static const uint8_t index_of_alphas_3[] = { 255, 
0, 1, 3, 2, 6, 4, 5, 
};


static const uint8_t alphas_4[] = { 
1, 2, 4, 8, 3, 6, 12, 11, 5, 10, 7, 14, 15, 13, 9, 1 
};
static const uint8_t index_of_alphas_4[] = { 255, 
0, 1, 4, 2, 8, 5, 10, 3, 14, 9, 7, 6, 13, 11, 12, 
};


static const uint8_t alphas_5[] = { 
1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 
27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1 
};
static const uint8_t index_of_alphas_5[] = { 255, 
0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 
4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15, 

};

static const uint8_t alphas_6[] = { 
1, 2, 4, 8, 16, 32, 3, 6, 12, 24, 48, 35, 5, 10, 20, 40, 
19, 38, 15, 30, 60, 59, 53, 41, 17, 34, 7, 14, 28, 56, 51, 37, 
9, 18, 36, 11, 22, 44, 27, 54, 47, 29, 58, 55, 45, 25, 50, 39, 
13, 26, 52, 43, 21, 42, 23, 46, 31, 62, 63, 61, 57, 49, 33, 1 
};
static const uint8_t index_of_alphas_6[] = { 255, 
0, 1, 6, 2, 12, 7, 26, 3, 32, 13, 35, 8, 48, 27, 18, 
4, 24, 33, 16, 14, 52, 36, 54, 9, 45, 49, 38, 28, 41, 19, 56, 
5, 62, 25, 11, 34, 31, 17, 47, 15, 23, 53, 51, 37, 44, 55, 40, 
10, 61, 46, 30, 50, 22, 39, 43, 29, 60, 42, 21, 20, 59, 57, 58, 

};

static const uint8_t alphas_7[] = { 
1, 2, 4, 8, 16, 32, 64, 3, 6, 12, 24, 48, 96, 67, 5, 10, 
20, 40, 80, 35, 70, 15, 30, 60, 120, 115, 101, 73, 17, 34, 68, 11, 
22, 44, 88, 51, 102, 79, 29, 58, 116, 107, 85, 41, 82, 39, 78, 31, 
62, 124, 123, 117, 105, 81, 33, 66, 7, 14, 28, 56, 112, 99, 69, 9, 
18, 36, 72, 19, 38, 76, 27, 54, 108, 91, 53, 106, 87, 45, 90, 55, 
110, 95, 61, 122, 119, 109, 89, 49, 98, 71, 13, 26, 52, 104, 83, 37, 
74, 23, 46, 92, 59, 118, 111, 93, 57, 114, 103, 77, 25, 50, 100, 75, 
21, 42, 84, 43, 86, 47, 94, 63, 126, 127, 125, 121, 113, 97, 65, 1 
};

static const uint8_t index_of_alphas_7[] = { 255, 
0, 1, 7, 2, 14, 8, 56, 3, 63, 15, 31, 9, 90, 57, 21, 
4, 28, 64, 67, 16, 112, 32, 97, 10, 108, 91, 70, 58, 38, 22, 47, 
5, 54, 29, 19, 65, 95, 68, 45, 17, 43, 113, 115, 33, 77, 98, 117, 
11, 87, 109, 35, 92, 74, 71, 79, 59, 104, 39, 100, 23, 82, 48, 119, 
6, 126, 55, 13, 30, 62, 20, 89, 66, 27, 96, 111, 69, 107, 46, 37, 
18, 53, 44, 94, 114, 42, 116, 76, 34, 86, 78, 73, 99, 103, 118, 81, 
12, 125, 88, 61, 110, 26, 36, 106, 93, 52, 75, 41, 72, 85, 80, 102, 
60, 124, 105, 25, 40, 51, 101, 84, 24, 123, 83, 50, 49, 122, 120, 121, 

};

static const uint8_t alphas_8[] = { 
1, 3, 5, 15, 17, 51, 85, 255, 26, 46, 114, 150, 161, 248, 19, 53, 
95, 225, 56, 72, 216, 115, 149, 164, 247, 2, 6, 10, 30, 34, 102, 170, 
229, 52, 92, 228, 55, 89, 235, 38, 106, 190, 217, 112, 144, 171, 230, 49, 
83, 245, 4, 12, 20, 60, 68, 204, 79, 209, 104, 184, 211, 110, 178, 205, 
76, 212, 103, 169, 224, 59, 77, 215, 98, 166, 241, 8, 24, 40, 120, 136, 
131, 158, 185, 208, 107, 189, 220, 127, 129, 152, 179, 206, 73, 219, 118, 154, 
181, 196, 87, 249, 16, 48, 80, 240, 11, 29, 39, 105, 187, 214, 97, 163, 
254, 25, 43, 125, 135, 146, 173, 236, 47, 113, 147, 174, 233, 32, 96, 160, 
251, 22, 58, 78, 210, 109, 183, 194, 93, 231, 50, 86, 250, 21, 63, 65, 
195, 94, 226, 61, 71, 201, 64, 192, 91, 237, 44, 116, 156, 191, 218, 117, 
159, 186, 213, 100, 172, 239, 42, 126, 130, 157, 188, 223, 122, 142, 137, 128, 
155, 182, 193, 88, 232, 35, 101, 175, 234, 37, 111, 177, 200, 67, 197, 84, 
252, 31, 33, 99, 165, 244, 7, 9, 27, 45, 119, 153, 176, 203, 70, 202, 
69, 207, 74, 222, 121, 139, 134, 145, 168, 227, 62, 66, 198, 81, 243, 14, 
18, 54, 90, 238, 41, 123, 141, 140, 143, 138, 133, 148, 167, 242, 13, 23, 
57, 75, 221, 124, 132, 151, 162, 253, 28, 36, 108, 180, 199, 82, 246, 1 
};
static const uint8_t index_of_alphas_8[] = { 255, 
0, 25, 1, 50, 2, 26, 198, 75, 199, 27, 104, 51, 238, 223, 3, 
100, 4, 224, 14, 52, 141, 129, 239, 76, 113, 8, 200, 248, 105, 28, 193, 
125, 194, 29, 181, 249, 185, 39, 106, 77, 228, 166, 114, 154, 201, 9, 120, 
101, 47, 138, 5, 33, 15, 225, 36, 18, 240, 130, 69, 53, 147, 218, 142, 
150, 143, 219, 189, 54, 208, 206, 148, 19, 92, 210, 241, 64, 70, 131, 56, 
102, 221, 253, 48, 191, 6, 139, 98, 179, 37, 226, 152, 34, 136, 145, 16, 
126, 110, 72, 195, 163, 182, 30, 66, 58, 107, 40, 84, 250, 133, 61, 186, 
43, 121, 10, 21, 155, 159, 94, 202, 78, 212, 172, 229, 243, 115, 167, 87, 
175, 88, 168, 80, 244, 234, 214, 116, 79, 174, 233, 213, 231, 230, 173, 232, 
44, 215, 117, 122, 235, 22, 11, 245, 89, 203, 95, 176, 156, 169, 81, 160, 
127, 12, 246, 111, 23, 196, 73, 236, 216, 67, 31, 45, 164, 118, 123, 183, 
204, 187, 62, 90, 251, 96, 177, 134, 59, 82, 161, 108, 170, 85, 41, 157, 
151, 178, 135, 144, 97, 190, 220, 252, 188, 149, 207, 205, 55, 63, 91, 209, 
83, 57, 132, 60, 65, 162, 109, 71, 20, 42, 158, 93, 86, 242, 211, 171, 
68, 17, 146, 217, 35, 32, 46, 137, 180, 124, 184, 38, 119, 153, 227, 165, 
103, 74, 237, 222, 197, 49, 254, 24, 13, 99, 140, 128, 192, 247, 112, 7, 

};

extern unsigned num_ele_mutiplicity;
extern const uint8_t *alphas;
extern const uint8_t *index_of_alphas;

static inline void setup_gf2m_ops(int m, const uint8_t **pp_alpha, const uint8_t **pp_index, uint8_t *p_order)
{
    if (m == 8){
        alphas = &alphas_8[0];
        index_of_alphas = &index_of_alphas_8[0];
        num_ele_mutiplicity = (1<<8) - 1;

    }
    else if (m == 3){
        alphas = &alphas_3[0];
        index_of_alphas = &index_of_alphas_3[0];
        num_ele_mutiplicity = (1<<3) - 1;
    }
    else if (m == 4){
        alphas = &alphas_4[0];
        index_of_alphas = &index_of_alphas_4[0];
        num_ele_mutiplicity = (1<<4) - 1;
    }
    else if (m == 5){
        alphas = &alphas_5[0];
        index_of_alphas = &index_of_alphas_5[0];
        num_ele_mutiplicity = (1<<5) - 1;
    }
    else if (m == 6){
        alphas = &alphas_6[0];
        index_of_alphas = &index_of_alphas_6[0];
        num_ele_mutiplicity = (1<<6) - 1;
    }
    else if (m == 7){
        alphas = &alphas_7[0];
        index_of_alphas = &index_of_alphas_7[0];
        num_ele_mutiplicity = (1<<7) - 1;
    }

    if (pp_alpha){
	*pp_alpha = alphas;
    }
    if (pp_index){
	*pp_index = index_of_alphas;
    }
    if (p_order){
	*p_order = num_ele_mutiplicity;
    }
}

static inline uint8_t gf2m_add(uint8_t a, uint8_t b)
{
    return a^b;
}

static inline uint8_t gf2m_mult_nz(uint8_t a, uint8_t b)
{
    unsigned index = (index_of_alphas[a] + index_of_alphas[b]);
    index = index % num_ele_mutiplicity;
    return alphas[index];
}

static inline uint8_t gf2m_power_nz(uint8_t a, uint8_t n)
{
    unsigned index = index_of_alphas[a];
    index = (index * n ) % num_ele_mutiplicity;
    return alphas[index];
}

static inline uint8_t gf2m_mult(uint8_t a, uint8_t b)
{
    if (a== 0 || b == 0){
        return 0;
    }
    return gf2m_mult_nz(a, b);
}

static inline uint8_t gf2m_div_nz(uint8_t a, uint8_t b)
{
    unsigned index = num_ele_mutiplicity - index_of_alphas[b];
    index = (index + index_of_alphas[a]) % num_ele_mutiplicity;
    return alphas[index];
}    

static inline uint8_t gf2m_div(uint8_t a, uint8_t b)
{
    if (a == 0) return 0;
    return gf2m_div_nz(a,b);
}
